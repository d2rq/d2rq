<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<?xml version="1.0" encoding="utf-8"?><HTML lang=en xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>The D2RQ Platform v0.7  -  User Manual</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<STYLE type=text/css>

BODY {
	PADDING-RIGHT: 1em; PADDING-LEFT: 70px; BACKGROUND: white fixed no-repeat left top; PADDING-BOTTOM: 2em; MARGIN: 0px; COLOR: black; PADDING-TOP: 2em; FONT-FAMILY: sans-serif; line-height: 1.8em;
}
:link {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #00c
}
:visited {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #609
}
A:active {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #c00
}
A:link IMG {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
A:visited IMG {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
A IMG {
	COLOR: white
}

@media All    
{
A IMG {
	
}
    }
TH {
	FONT-FAMILY: sans-serif
}
TD {
	FONT-FAMILY: sans-serif
}
H4 {
	TEXT-ALIGN: left
}
H5 {
	TEXT-ALIGN: left
}
H6 {
	TEXT-ALIGN: left
}
H4 {
	FONT: bold 100% sans-serif
}
H5 {
	FONT: italic 100% sans-serif
}
H6 {
	FONT: small-caps 100% sans-serif
}
.hide {
	DISPLAY: none
}
DIV.head {
	MARGIN-BOTTOM: 1em
}
DIV.head H1 {
	CLEAR: both; MARGIN-TOP: 2em
}
DIV.head TABLE {
	MARGIN-TOP: 2em; MARGIN-LEFT: 2em
}
P.copyright {
	FONT-SIZE: small
}
P.copyright SMALL {
	FONT-SIZE: small
}

@media Screen    
{
UNKNOWN {
	BACKGROUND: #ffa
}
    }
DT {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
DD {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
DT {
	FONT-WEIGHT: bold
}
CODE {
	FONT-FAMILY: monospace
}

@media Aural    
{
H1 {
	stress: 20; richness: 90
}
h2 {
	stress: 20; richness: 90
}
H3 {
	stress: 20; richness: 90
}
.hide {
	speak: none
}
P.copyright {
	volume: x-soft; speech-rate: x-fast
}
DT {
	pause-before: 20%
}
PRE {
	speak-punctuation: code
}
}

h1 { background: white; color: #005a9c; font: 170% sans-serif; margin-top: 3em; text-align: left; }
h2 { background: white; color: #005a9c; font: 140% sans-serif; margin-top: 3em; text-align: left; }
h3 { background: white; color: #005a9c; font: 120% sans-serif; margin-top: 3em; text-align: left; }
pre { background: #ffec8b; line-height: 1.25em; padding: 1.3em 2em;}
ul.toc, ul.toc ul { list-style-type: none }
ul.toc li { font-weight: bold; }
ul.toc li li { font-weight: normal; }
#doctype { margin-top: 1em; }
</STYLE>
</HEAD>
<BODY>
<DIV class=head> 
  <h1 id=title>The D2RQ Platform v0.7 - Treating Non-RDF Relational Databases as Virtual RDF Graphs</h1>
  <h2 id=doctype>User Manual and Language Specification</h2>
<DL>
  <DT>This Version: 
    <DD><A 
  href="http://www4.wiwiss.fu-berlin.de/bizer/d2rq/spec/20090810/">http://www4.wiwiss.fu-berlin.de/bizer/d2rq/spec/20090810/</A> 
    <DT>Latest Version: 
    <DD><A 
  href="http://www4.wiwiss.fu-berlin.de/bizer/d2rq/spec/">http://www4.wiwiss.fu-berlin.de/bizer/d2rq/spec/</A>
<DT> 
  <DT>Authors: 
    <DD><a href="http://www.wiwiss.fu-berlin.de/en/institute/pwo/bizer/team/BizerChristian.html" target="_blank">Chris 
      Bizer</a> (Freie Universit&auml;t Berlin, Germany) 
    <DD>  
    <DD><a href="http://richard.cyganiak.de/">Richard Cyganiak</a> (Freie Universit&auml;t Berlin, Germany) 
    <DD>  
    <DD><a href="http://www.wiwiss.fu-berlin.de/suhl/ueber_uns/team/Joerg_Garbers.htm" target="_blank">J&ouml;rg 
    Garbers</a> (Freie Universit&auml;t Berlin, Germany)    
    <DD>  
    <DD><a href="http://www.oliver-maresch.de/" target="_blank">Oliver Maresch</a> (Technische Universit&auml;t Berlin, Germany)    
    <DD>  
    <DD>  
    <DD><a href="http://beckr.org/" target="_blank">Christian Becker</a> (Freie Universit&auml;t Berlin, Germany)    
    <DD>      
  <DT>  
</DL>
<P>&nbsp;</P>
<HR title="Separator for header">
</DIV>

<h2><A id=abstract name=abstract></A>Abstract</h2>
<P>As Semantic Web technologies are getting mature, there is a growing need for 
  RDF applications to access the content of huge, live, non-RDF, legacy databases 
  without having to replicate the whole database into RDF. This document describes 
  the  D2RQ mapping language  for treating non-RDF
  relational databases as virtual RDF graphs, and the D2RQ Platform that enables applications to access these graphs through the <a href="http://jena.sourceforge.net/" target="_blank">Jena</a> and
  <a href="http://www.openrdf.org/" target="_blank">Sesame</a>
  APIs, as well as over the Web via the <a href="http://www.w3.org/TR/rdf-sparql-protocol/">SPARQL Protocol</a> and as <a href="http://en.wikipedia.org/wiki/Linked_Data">Linked Data</a>.</P>

<h2 id="toc">Table of Contents</h2>

<ul class="toc">
  <li>1. <a href="#introduction">Introduction</a></li>
  <li>2. <a href="#architecture">The D2RQ Platform</a></li>
  <li>3. <a href="#compatibility">Database Compatibility</a></li>
  <li>4. <a href="#commandline">The Command Line Tools</a>
    <ul>
      <li>4.1. <a href="#generatemapping">Auto-Generating Mapping Files</a></li>
      <li>4.2. <a href="#dumprdf">Dumping the Database to an RDF File</a></li>
    </ul>
  </li>
  <li>5. <a href="#usingD2RQ">Using D2RQ within Jena</a>
    <ul>
      <li>5.1. <a href="#usingmodel">Using Jena's Model API</a></li>
      <li>5.2. <a href="#usingfind">Using Jena's Graph API</a></li>
      <li>5.3. <a href="#sparql">Using SPARQL</a></li>
      <li>5.4. <a href="#jena-assembler">The D2RQ Assembler</a></li>
      <li>5.5. <a href="#unit-tests">Running the D2RQ unit tests</a></li>
    </ul>
  </li>
  <li>6. <a href="#usingSesame">Using D2RQ within Sesame</a>
    <ul>
      <li>6.1. <a href="#usingSesameRepository">Using D2RQ as Sesame repository</a></li>
    </ul>
  </li>
  <li>7. <a href="#specification">D2RQ Language Specification</a>
    <ul>
      <li>7.1. <a href="#database">d2rq:Database</a></li>
      <li>7.2. <a href="#classmap">d2rq:ClassMap</a></li>
      <li>7.3. <a href="#propertybridge">d2rq:PropertyBridge</a></li>
      <li>7.4. <a href="#translationtable">d2rq:TranslationTable</a></li>
      <li>7.5. <a href="#configuration">d2rq:Configuration</a></li>
      <li>7.6. <a href="#servingvocabularies">Serving Vocabulary Classes and Properties</a></li>
      <li>7.7. <a href="#conditional">Conditional Mappings</a></li>
      <li>7.8. <a href="#hint">Performance Optimization using Hint Properties</a></li>
      <li>7.9. <a href="#deprecated">Deprecated Language Constructs</a></li>
    </ul>
  </li>
  <li>8. <a href="#change_log">Change Log</a></li>
</ul>
<hr />

<h1><A id=introduction name=introduction>1. Introduction</A></h1>
<P>This document describes the D2RQ Platform for accessing 
  non-RDF, relational databases as virtual, read-only RDF graphs.  D2RQ offers a variety of different RDF-based access mechanisms 
  to the content of huge, non-RDF databases without having to replicate the database 
  into RDF.</P>

<p>Using D2RQ you can:</p>
<ul>
  <li>query a non-RDF database using <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL</a> or find(spo) queries,</li>
  <li>access information in a non-RDF database using the <a href="http://jena.sourceforge.net/">Jena</a> API or the <a href="http://www.openrdf.org/">Sesame</a> API,</li>
  <li>access the content of the database as <a href="http://en.wikipedia.org/wiki/Linked_Data">Linked Data</a> over the Web,</li>
  <li>ask <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL</a> queries over the <a href="http://www.w3.org/TR/rdf-sparql-protocol/">SPARQL Protocol</a> against the database. </li>
</ul>

<HR title="Separator for header">
<h1><a id="architecture" name="architecture">2. The D2RQ Platform</a></h1>
<p>The D2RQ Platform consists of:</p>
<ul>
  <li>the <strong>D2RQ Mapping Language</strong>, a declarative mapping language 
    for describing the relation between an ontology and an relational data model. 
  </li>
  <li>the <strong>D2RQ Engine</strong>, a plug-in for the Jena and Sesame Semantic Web toolkits, 
    which uses the mappings to rewrite Jena and Sesame API calls to SQL queries against the database and passes 
    query results  up to the higher layers of the frameworks.</li>
  <li><strong>D2R Server</strong>, an HTTP server that can be used to provide a Linked Data view, a HTML view for debugging and a SPARQL Protocol endpoint over the database.</li>
</ul>

<p>The figure below depicts the architecture of the D2RQ Platform: </p>
<p><img src="architecture.png" alt="D2RQ Platform architecture diagram" /></p>
<p>The <strong>D2RQ Engine</strong> is implemented as a Jena graph, the basic information representation object within the Jena framework. A D2RQ graph wraps a local relational databases into a virtual, read-only RDF graph. It rewrites Jena or Sesame API calls, find() and SPARQL queries to application-data-model specific SQL queries. The result sets of these SQL queries are transformed into RDF triples or SPARQL result sets that are passed up to the higher layers of the framework. The D2RQ Sesame interface wraps the D2RQ Jena graph implementation behind a Sesame RDF source interface. It provides a read-only Sesame repository interface for querying and reasoning with RDF and RDF Schema.</p>
<p><strong>D2R Server</strong> is a tool for publishing relational databases on the Semantic Web. It enables RDF and HTML browsers to navigate the content of the database, 
and allows applications to query the database using the SPARQL query language. D2R Server builds on the D2RQ Engine. For detailed information on how to set up D2R Server please refer to the 
separate <a href="http://www4.wiwiss.fu-berlin.de/bizer/d2r-server/">D2R Server website</a>. </p>
<p>&nbsp;</p>
<p><strong>Example</strong></p>
<p>We are using an example database which stores information about conferences, 
  papers, authors and topics throughout this manual. The database is mapped to the 
  International Semantic Web Community (ISWC) Ontology.</p>
<ul>
  <li>ISWC D2RQ mapping file: <a href="../example/mapping-iswc.n3">mapping-iswc.n3</a></li>
  <li>Example database (with some entries from the ISWC 2002 conference):
    <a href="../example/iswc-mysql.sql">iswc-mysql.sql</a> (MySQL dump)</li>
  <li>ISWC ontology: <a href="http://annotation.semanticweb.org/iswc/iswc.daml">iswc.daml</a></li>
</ul>
<hr />

<h1 id="compatibility">3. Database Compatibility</h1>
<p>The D2RQ Plaffrom has been tested with these database engines:</p>

<dl>
<dt>Oracle</dt>
<dd>Works with Oracle.</dd>

<dt>MySQL</dt>
<dd>Works with MySQL.</dd>

<dt>PostgreSQL</dt>
<dd>Works with PostgreSQL.</dd>

<dt>Microsoft SQL Server</dt>
<dd>Works with Microsoft SQL Server.</dd>

<dt>ODBC data sources (e.g. Microsoft Access)</dt>
<dd>D2RQ can connect to ODBC data sources over the Java's ODBC-JDBC bridge. This works
  with the following limitations:
  <ul>
  <li>The mapping generator does not work.</li>
  <li>The automatic detection of column types does not work. Therefore, column types
    for <em>all</em> database columns must be provided in the mapping file
    by adding <tt>d2rq:textColumn</tt>,
    <tt>d2rq:numericColumn</tt>, <tt>d2rq:dateColumn</tt> or
    <tt>d2rq:timestampColumn</tt> statements to the <tt>d2rq:Database</tt>.</li>
  </ul>
  If possible, a dedicated JDBC driver for the database engine should be used
  instead of the ODBC-JDBC bridge to avoid these problems.
</dd>

<dt>Other SQL-92 compatible databases</dt>
<dd>By default, D2RQ will interact with the database using the SQL-92 standard.
  Any compatible database <em>should</em> work out of the box.</dd>

<dt>Other databases</dt>
<dd>Not tested; may or may not work. We are interested in feedback about D2RQ running with other database engines.</dd>
</dl>
<hr />

<h1 id="commandline">4. The Command Line Tools</h1>

<p>The D2RQ Platform comes with
two command line tools: a mapping generator that creates a default mapping file
by analyzing the schema of an existing database, and a dump script that writes
the complete contents of a database into a single RDF file. The scripts work
on Windows and Unix systems.</p>

<h2 id="generatemapping">4.1 Auto-generate Mapping Files</h2>

<p>The <tt>generate-mapping</tt> script creates a default mapping file by
analyzing the schema of an existing database. This mapping file can be used
as-is or can be customized.</p>

<pre>generate-mapping [-u username] [-p password] [-d driverclass] [-o outfile.n3] [-b base uri] jdbcURL</pre>

<dl>
<dt>jdbcURL</dt>
<dd><p>JDBC connection URL for the database. Refer to your JDBC driver documentation
for the format for your database engine. Examples:</p>
<p>MySQL: <tt>jdbc:mysql://<em>servername</em>/<em>databasename</em></tt><br />
PostgreSQL: <tt>jdbc:postgresql://<em>servername</em>/<em>databasename</em></tt><br />
Oracle: <tt>jdbc:oracle:thin:@<em>servername</em>:1521:<em>databasename</em></tt><br />
Microsoft SQL Server: <tt>jdbc:sqlserver://<em>servername</em>;databaseName=<em>databasename</em></tt> (due to the semicolon, the URL must be put in quotes when passed as a command-line argument in Linux/Unix shells)</p>
</dd>

<dt>-u username</dt>
<dd>The login name of the database user</dd>

<dt>-p password</dt>
<dd>The password of the database user</dd>

<dt>-d driverclass</dt>
<dd><p>The fully qualified Java class name of the database driver. The jar file
containing the JDBC driver has to be in D2RQ's <tt>/lib/db-drivers/</tt>
directory. Drivers for MySQL and PostgreSQL are provided with the
download, for other databases a driver has to be downloaded from the vendor
or a third party. To find the driver class name, consult the driver
documentation. Examples:</p>
<p>MySQL: <tt>com.mysql.jdbc.Driver</tt><br />
PostgreSQL: <tt>org.postgresql.Driver</tt><br />
Oracle: <tt>oracle.jdbc.OracleDriver</tt><br />
Microsoft SQL Server: <tt>com.microsoft.sqlserver.jdbc.SQLServerDriver</tt></p>
</dd>

<dt>-o outfile.n3</dt>
<dd>The generated mapping will be stored in this file in N3 syntax. If this
parameter is omitted, the mapping will be written to standard out.</dd>

<dt>-b baseURI</dt>
<dd>The base URI is used to construct a vocabulary namespace that will automatically be served
as Linked Data by D2R Server, following the convention <tt>http://<em>baseURI</em><strong>/vocab/resource/</strong></tt>.  
This should be the same base URI that is used when invoking the server. Defaults to <tt>http://localhost:2020/</tt>.
For more information on vocabulary serving, see <a href="#servingvocabularies">section 7.4</a>.</dd>
</dl>

<p>Example invocation for a local MySQL database:</p>

<pre>generate-mapping -d com.mysql.jdbc.Driver -u root jdbc:mysql://127.0.0.1/iswc</pre>


<h2 id="dumprdf">4.2 Dumping the Database to an RDF File</h2>

<p>The <tt>dump-rdf</tt> script provides a way of dumping the contents of the
whole database into a single RDF file. This can be done with or without a
mapping file. If a mapping file is specified, then the script will use it
to translate the database contents to RDF. If no mapping file is specified,
then the script will invoke <tt>generate-mapping</tt> and use its default
mapping for the translation.</p>

<pre>dump-rdf -m mapping.n3 [output parameters]</pre>

<p>If no mapping file is provided, then the database connection must be
specified on the command line. With the exception of <tt>fetchSize</tt>, the meaning of all parameters is the
same as for the <a href="#generatemapping"><tt>generate-mapping</tt> script</a>.

<pre>dump-rdf -u username [-p password] -d driverclass -j jdbcURL [-f fetchSize] [output parameters]</pre>

<p>Several optional parameters control the RDF output:</p>

<dl>
<dt>-f format</dt>
<dd>The RDF syntax to use for output. Supported syntaxes are "RDF/XML" (the default),
  "RDF/XML-ABBREV", "N3", "N-TRIPLE". "N-TRIPLE" works best for large 
  databases.</dd>
  
<dt>-s fetchSize</dt>
<dd>The number of rows to retrieve with every database request. This value is particularily important to control memory resources of both the D2RQ and the database server when performing dumps. <tt>dump-rdf</tt> sets this value to 500 by default, or to <tt>Integer.MIN_VALUE</tt> for MySQL in order to enable <a href="http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-implementation-notes.html">streaming mode</a>.
This value may alternatively be specified in the mapping using <a href="#database">d2rq:fetchSize</a>.
</dd>  

<dt>-b baseURI</dt>
<dd>A base URI for resolving relative URI patterns.</dd>

<dt>-o outfile</dt>
<dd>Name of the destination file. Defaults to standard output.</dd>
</dl>

<p>Example invocation using a mapping file:</p>

<pre>dump-rdf -m mapping-iswc.n3 -f N-TRIPLE -b http://localhost:2020/ &gt; iswc.nt</pre>

<hr />


<h1 id="usingD2RQ">5. Using D2RQ within Jena</h1>
<P>This section describes how the D2RQ Engine is used within the <a href="http://jena.sourceforge.net/">Jena 2 Semantic Web framework</a>. 
</P>
<P><strong>Download</strong></P>
<P>D2RQ can be downloaded from <a href="http://sourceforge.net/projects/d2rq-map/" target="_blank">http://sourceforge.net/projects/d2rq-map/</a></P>
<P><strong>Jena Versions</strong></P>
<p>At the time of writing, the latest Jena release is version 2.4. D2RQ requires
  a more recent custom-built version of Jena, the version that ships with
  <a href="http://jena.sourceforge.net/ARQ/">ARQ 1.4</a>. All required jar files
  are included in the D2RQ distribution. (Jena 2.4 and 2.3 <em>may</em>
  work to some extent.)</p>

<P><strong>Installation</strong></P>
<ol>
<li>Add the <tt>d2rq-X.X.jar</tt> file from D2RQ's <tt>/lib</tt> directory to your
  application's classpath.</li>
<li>Add all jar files from the <tt>/lib/arq-1.4</tt> directory
  to your application's classpath.</li>
<li>Add a JDBC driver for your database to your application's
  classpath. Drivers for some popular databases are found
  in D2RQ's <tt>/lib/db-drivers</tt> directory.</li>
</ol>

<p><strong>Debugging</strong></p>
<p>D2RQ uses the <a href="http://www.slf4j.org/">Simple Logging Facade for Java (SLF4J)</a>
  API for logging. To enable D2RQ debug messages, set the log level for logger
  <tt>de.fuberlin.wiwiss.d2rq</tt> to <tt>ALL</tt>. 

<h2 id="usingmodel">5.1 Using Jena's Model API</h2>

<p>The ModelD2RQ class provides a Jena
<a href="http://jena.sourceforge.net/javadoc/com/hp/hpl/jena/rdf/model/Model.html">Model</a>
view on the data
in a D2RQ-mapped database. The example shows how a ModelD2RQ is set up
using a mapping file, and how Jena API calls are used to extract
information about papers and their authors from the model.</p>

<p>The ISWC and FOAF classes have been created with Jena's
<a href="http://jena.sourceforge.net/how-to/schemagen.html">schemagen</a>
tool. The DC and RDF classes are part of Jena.</p>

<pre>// Set up the ModelD2RQ using a mapping file
Model m = new ModelD2RQ("file:doc/example/mapping-iswc.n3");

// Find anything with an rdf:type of iswc:InProceedings
StmtIterator paperIt = m.listStatements(null, RDF.type, ISWC.InProceedings);

// List found papers and print their titles
while (paperIt.hasNext()) {
    Resource paper = paperIt.nextStatement().getSubject();
    System.out.println("Paper: " + paper.getProperty(DC.title).getString());

    // List authors of the paper and print their names
    StmtIterator authorIt = paper.listProperties(DC.creator);
    while (authorIt.hasNext()) {
        Resource author = authorIt.nextStatement().getResource();
        System.out.println("Author: " + author.getProperty(FOAF.name).getString());
    }
    System.out.println();
}</pre>


<h2 id="usingfind">5.2 Using Jena's Graph API</h2>

<p>In some situations, it is better to use Jena's low-level
<a href="http://jena.sourceforge.net/javadoc/com/hp/hpl/jena/graph/Graph.html">Graph</a>
API instead of the Model API. D2RQ provides an implementation
of the Graph interface, the GraphD2RQ.</p>

<p>The following example shows how the Graph API is used to find all papers
that have been published in 2003.</p>

<pre>// Load mapping file
Model mapping = FileManager.get().loadModel("doc/example/mapping-iswc.n3");

// Set up the GraphD2RQ
GraphD2RQ g = new GraphD2RQ(mapping, "http://localhost:2020/");

// Create a find(spo) pattern 
Node subject = Node.ANY;
Node predicate = DC.date.asNode();
Node object = Node.createLiteral("2003", null, XSDDatatype.XSDgYear);
Triple pattern = new Triple(subject, predicate, object);

// Query the graph
Iterator it = g.find(pattern);

// Output query results
while (it.hasNext()) {
    Triple t = (Triple) it.next();
    System.out.println("Published in 2003: " + t.getSubject());
}</pre>

<h3 id="cachinggraph">5.2.1 The CachingGraphD2RQ</h3>

<p>In addition to the GraphD2RQ, there is a CachingGraphD2RQ which supports
the same API and uses a LRU cache to remember a number of recent query
results. This will improve performance for repeated queries, but will
report inconsistent results if the database is updated during the lifetime
of the CachingGraphD2RQ.</p>


<h2 id="sparql">5.3 Using SPARQL</h2>
<p>D2RQ can answer SPARQL queries against a D2RQ model. The SPARQL queries
are processed by Jena's ARQ query engine. The example shows how a D2RQ model
is set up, how a SPARQL query is executed, and how the results are written
to the console.</p>

<pre>ModelD2RQ m = new ModelD2RQ("file:doc/example/mapping-iswc.n3");
String sparql = 
    "PREFIX dc: &lt;http://purl.org/dc/elements/1.1/>" +
    "PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/>" +
    "SELECT ?paperTitle ?authorName WHERE {" +
    "    ?paper dc:title ?paperTitle . " +
    "    ?paper dc:creator ?author ." +
    "    ?author foaf:name ?authorName ." +
    "}";
Query q = QueryFactory.create(sparql); 
ResultSet rs = QueryExecutionFactory.create(q, m).execSelect();
while (rs.hasNext()) {
    QuerySolution row = rs.nextSolution();
    System.out.println("Title: " + row.getLiteral("paperTitle").getString());
    System.out.println("Author: " + row.getLiteral("authorName").getString());
}</pre>

<h2 id="jena-assembler">5.4 The D2RQ Assembler</h2>
<p>D2RQ comes with a Jena assembler. Jena assembler specifications are RDF
configuration files that describe how to construct a Jena model. For more
information on Jena assemblers, see the
<a href="http://jena.sourceforge.net/assembler/index.html">Jena Assembler quickstart page</a>.</p>

<p>The following example shows an assembler specification for a D2RQ model:</p>

<pre>@prefix : &lt;#&gt; .
@prefix ja: &lt;http://jena.hpl.hp.com/2005/11/Assembler#&gt; .
@prefix d2rq: &lt;http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#&gt; .

&lt;&gt; ja:imports d2rq: .

:myModel
  a d2rq:D2RQModel;
  d2rq:mappingFile &lt;mapping-iswc.n3&gt;;
  d2rq:resourceBaseURI &lt;http://localhost:2020/&gt;;
  .</pre>

<p>D2RQ model specifications support these two properties:

<dl>
  <dt><tt>d2rq:mappingFile</tt> (required)</dt>
  <dd>The URI of a D2RQ mapping file to use for setting up the model</dd>
  <dt><tt>d2rq:resourceBaseURI</tt> (optional)<dt>
  <dd>The base URI for turning relative URI patterns into full URIs.
  If not specified, D2RQ will pick an appropriate base URI.</dd>
</dl>

<p>This usage example will create a D2RQ model from a model specification, and write it to the console:</p>

<pre>// Load assembler specification from file
Model assemblerSpec = FileManager.get().loadModel("doc/example/assembler.n3");

// Get the model resource
Resource modelSpec = assemblerSpec.createResource(assemblerSpec.expandPrefix(":myModel"));

// Assemble a model
Model m = Assembler.general.openModel(modelSpec);

// Write it to System.out
m.write(System.out);</pre>


<h2 id="unit-tests">5.5. Running the D2RQ unit tests</h2>

<p>Some of the D2RQ unit tests are using the ISWC example database from the <tt>/doc/example</tt> directory of the D2RQ distribution. To run the tests:</p>

<ol>
  <li>Set up a MySQL database and import the database dump from <tt>/doc/example/iswc-mysql.sql</tt>.</li>
  <li>Change the JDBC database connection string, username and password in <tt>/doc/example/mapping-iswc.n3</tt>
    to match your configuration.</li>
  <li>Run the <tt>D2RQTestSuite</tt> class as a JUnit test.</li>
</ol>


<HR>
<h1 id="usingSesame">6. Using D2RQ within Sesame</h1>
<P>This section describes how the D2RQ Engine is used within the Sesame 1.2 RDF API. 
</P>
<P><strong>Download</strong></P>
<P>You have to download the following packages: </P>
<ul>
  <li>Sesame 1.2 can be downloaded form <a href="http://www.openrdf.org/" target="_blank">http://www.openrdf.org/</a></li>
<li>Jena 2 can be downloaded from <a href="http://jena.sourceforge.net/downloads.html" target="_blank">http://jena.sourceforge.net/downloads.html </a> (The Jena package is neccessary, because the Sesame interface is just providing a wrapper around the Jena D2RQ interface)</li>
<li>D2RQ can be downloaded from <a href="http://sourceforge.net/projects/d2rq-map/" target="_blank">http://sourceforge.net/projects/d2rq-map/</a></li>
</ul>
<P><strong>Installation</strong></P>
<P> You have to add the &quot;d2rq.jar&quot; and &quot;d2rq-to-sesame.jar&quot; files from the &quot;bin&quot; directory 
  of the D2RQ distribution together with the Jena 2 and Sesame 1.2 jar files to your classpath. To run D2RQ only the jar files
  <ul>
    <li>jena.jar</li>
    <li>antlr-2.7.5.jar</li>
    <li>commons-logging.jar</li>
    <li>concurrent.jar</li>
    <li>xercesImpl.jar</li>
    <li>and xml-apis.jar</li>
  </ul>
  from the &quot;lib&quot; folder of the Jena 2.3 distribution are required.</P>

<h2><a name="usingSesameRepository" id="usingSesameRepository"></a>6.1 Using D2RQ as Sesame repository</h2>
<p>The following example shows how RDQL is used to get all information about the paper with the URI
  "http://www.conference.org/conf02004/paper#Paper1" out of a D2RQRepository.</p>
  <pre>
import de.fuberlin.wiwiss.d2rq.sesame.D2RQRepository;
import de.fuberlin.wiwiss.d2rq.sesame.D2RQSource;

import org.openrdf.model.Value;
import org.openrdf.sesame.Sesame;
import org.openrdf.sesame.constants.QueryLanguage;
import org.openrdf.sesame.query.QueryResultsTable;
import org.openrdf.sesame.repository.SesameRepository;

...

try{
    // Initialize repository
    D2RQSource source = new D2RQSource("file:///where/you/stored/the/d2rq-mapping.n3", "N3");
    SesameRepository repos = new D2RQRepository("urn:youRepository", source, Sesame.getService());

    // Query the repository
    String query = "SELECT ?x, ?y WHERE (&lt;http://www.conference.org/conf02004/paper#Paper1&gt;, ?x, ?y)";        
    QueryResultsTable result = repos.performTableQuery(QueryLanguage.RDQL, query);

    // print the result
    int rows = result.getRowCount();
    int cols = result.getColumnCount();
    for(int i = 0; i &lt; rows; i++){
        for(int j = 0; j &lt; cols; j++){
            Value v = result.getValue(i,j);
            System.out.print(v.toString() + "    ");                  
        }
        System.out.println();
    }
} catch(Exception e){
    // catches D2RQException from D2RQSource construcor
    // catches java.io.IOException,
    //         org.openrdf.sesame.query.MalformedQueryException,
    //         org.openrdf.sesame.query.QueryEvaluationException, 
    //         org.openrdf.sesame.config.AccessDeniedException
    //         from performTableQuery
    e.printStackTrace();
}
  </pre>

<hr />

<h1 id="specification">7. Language Specification</h1>
<P>The D2RQ mapping language is a declarative  language for describing the relation between 
  a relational database schemata and <a href="http://www.w3.org/TR/rdf-schema/">RDFS vocabularies</a> or <a href="http://www.w3.org/TR/owl-features/">OWL</a> ontologies. A D2RQ map is an RDF document. 
</P>
<P>The language is formally defined by the <a href="http://www4.wiwiss.fu-berlin.de/bizer/d2rq/0.1">D2RQ RDFS Schema</a>. 
  <br>
  The D2RQ namespace is http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#</P>
<P>An ontology is mapped to a database schema using <tt>d2rq:ClassMaps</tt> and
  <tt>d2rq:PropertyBridges</tt>.
  The central object within D2RQ and also the 
  object to start with when writing a new D2RQ map is the ClassMap. A ClassMap 
  represents a class or a group of similar classes of the ontology. A ClassMap 
  specifies how instances of the class are identified. It has a set of PropertyBridges, 
  which specify how the properties of an instance are created. </P>
<P>The figure below shows the structure of an example D2RQ map:</P>
<p><img src="mapping.png" alt="Diagram: Structure of a typical D2RQ map" /></p>
<P>The following example D2RQ map relates the table conferences in a database to the class 
  conference in an ontology. You can use the map as a template for writing your own 
  maps.</P>
  <pre># D2RQ Namespace  
@prefix d2rq:        &lt;http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#&gt; .
# Namespace of the ontology
@prefix : &lt;http://annotation.semanticweb.org/iswc/iswc.daml#&gt; .

# Namespace of the mapping file; does not appear in mapped data
@prefix map: &lt;file:///Users/d2r/example.n3#&gt; .

# Other namespaces
@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; . 

map:Database1 a d2rq:Database;
    d2rq:jdbcDSN &quot;jdbc:mysql://localhost/iswc&quot;;
    d2rq:jdbcDriver &quot;com.mysql.jdbc.Driver&quot;;
    d2rq:username &quot;user&quot;;
    d2rq:password &quot;password&quot;;
    .
# -----------------------------------------------
# CREATE TABLE Conferences (ConfID int, Name text, Location text);

map:Conference a d2rq:ClassMap;
    d2rq:dataStorage map:Database1.
    d2rq:class :Conference;
    d2rq:uriPattern &quot;http://conferences.org/comp/confno@@Conferences.ConfID@@&quot;;
    .
map:eventTitle a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:Conference;
    d2rq:property :eventTitle;
    d2rq:column &quot;Conferences.Name&quot;;
    d2rq:datatype xsd:string;
    .
map:location a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:Conference;
    d2rq:property :location;
    d2rq:column &quot;Conferences.Location&quot;; 
    d2rq:datatype xsd:string;
    .</pre>

<p>The constructs of the D2RQ mapping language are described in detail below.</p>


<h2><a name="database"></a>7.1 Database</h2>
<P>A <strong>d2rq:Database</strong> defines a JDBC or ODBC connection to a local relational database 
  and specifies the type of the database columns used by D2RQ. A D2RQ map can 
  contain several d2rq:Databases for accessing different local databases.</P>
<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%"><strong>d2rq:jdbcDSN</strong></td>
    <td width="80%">The JDBC database URL. This is a string of the form
      <tt>jdbc:<em>subprotocol</em>:<em>subname</em></tt>. For a MySQL database,
      this is something like <tt>jdbc:mysql://hostname:port/dbname</tt>.
      <a href="http://www.devx.com/tips/Tip/28818">Examples for other databases</a></td>
  </tr>
  <tr> 
    <td><strong>d2rq:jdbcDriver</strong></td>
    <td>The JDBC driver class name for the database. Used together with d2rq:jdbcDSN.
      Example: <tt>com.mysql.jdbc.Driver</tt> for MySQL.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:odbcDSN</strong></td>
    <td>The ODBC data source name of the database.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:username </strong></td>
    <td>A username if required by the database.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:password </strong></td>
    <td>A password if required by the database.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:resultSizeLimit </strong></td>
    <td>An integer value that will be added as a LIMIT clause to all
      generated SQL queries. This sets an upper bound for the number
      of results returned from large databases. Note that this effectively
      &#8220;cripples&#8221; the server and can cause unpredictable
      results. Also see <a href="#propertybridge">d2rq:limit and d2rq:limitInverse</a>, which may be used to impose
      result limits on individual property bridges.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:fetchSize</strong></td>
    <td>An integer value that specifies the number of rows to retrieve
       with every database request. This value is particularily important to control memory resources
       of both the D2RQ and the database server when performing dumps.
       <tt>dump-rdf</tt> sets this value to 500 by default, or to <tt>Integer.MIN_VALUE</tt> for MySQL in order to
       enable <a href="http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-implementation-notes.html">streaming mode</a>.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:allowDistinct</strong></td>
    <td>Specifies the databases ability to handle DISTINCT correctly. 
    Value: "true" or "false". For example MSAccess cuts fields longer than 256 chars.</td>
  </tr>
  <tr> 
    <td><strong>d2rq:textColumn</strong><br />
      <strong>d2rq:numericColumn</strong><br />
      <strong>d2rq:dateColumn</strong><br />
      <strong>d2rq:timestampColumn</strong>
    </td>
    <td>These properties are used to declare the column type of database columns.
      Values are column names in <tt>Table_name.column_name</tt> notation.
      These properties do not need to be specified <em>unless</em>
      the engine is for some reason unable to determine the correct
      column type by itself. The <strong>d2rq:timestampColumn</strong>
      is for column types that combine a date and a time.
    </td>
  </tr>
</table>

<P><strong>Example</strong></P>
  <pre>map:Database1 a d2rq:Database;
              d2rq:jdbcDSN &quot;jdbc:mysql://localhost/iswc&quot;;
              d2rq:jdbcDriver &quot;com.mysql.jdbc.Driver&quot;;
              d2rq:username &quot;user&quot;;
              d2rq:password &quot;password&quot;;
              d2rq:numericColumn &quot;Conferences.ConfID&quot;;
              d2rq:textColumn &quot;Conferences.URI&quot;;
              d2rq:textColumn &quot;Conferences.Name&quot;;
              d2rq:textColumn &quot;Conferences.Location&quot;;
              d2rq:dateColumn &quot;Conferences.Date&quot;.</pre>


<p><strong>Specifying JDBC connection properties</strong></p>

<p>Most JDBC drivers offer a range of <em>JDBC connection properties</em>,
  which specify advanced configuration options for the JDBC database connection.
  A D2RQ mapping file can be made to use arbitrary connection properties when
  setting up the JDBC connection. This is done through the <tt>jdbc:</tt> namespace
  (namespace URI: <tt>http://d2rq.org/terms/jdbc/</tt>). RDF properties in that
  namespace will be passed as connection properties.
  Consult your JDBC driver's documentation for a list of available properties.</p>

<pre>@prefix jdbc: &lt;http://d2rq.org/terms/jdbc/&gt; .

map:database a d2rq:Database;
    # ... other database configuration ...
    jdbc:autoReconnect "true";
    jdbc:zeroDateTimeBehavior "convertToNull";
    .</pre>

<p>The example uses two connection properties which are understood by the MySQL
JDBC driver: <tt>autoReconnect=true</tt> and 
<tt>zeroDateTimeBehavior=convertToNull</tt>.</p>

<p><strong>Keep-alive long-term connections</strong></p>

<p>Some database servers like MySQL may terminate open client connections after some
interval (MySQL default is 8 hours). To keep alive long-term connections, D2R can be
configured to periodically run "noop" queries. This feature can be enabled with the
special property <tt>jdbc:keepAlive</tt>. An example is given below:</p>

<pre>@prefix jdbc: &lt;http://d2rq.org/terms/jdbc/&gt; .

map:database a d2rq:Database;
    # ... other database configuration ...
    jdbc:keepAlive "3600"; # value in seconds
    jdbc:keepAliveQuery "SELECT 1"; # (optionally to override default noop query)
    .</pre>

<p>By default the noop query is "SELECT 1", which may not work with some DBMS.
For this purpose, the default query may be overridden with a custom noop query.</p>

<h2><a name="classmap"></a>7.2 ClassMap</h2>
<p>A <strong>d2rq:ClassMap</strong> represents a class or a group of similar classes 
  of an OWL ontology or RDFS schema. A class map defines how instances of the 
  class are identified. It is connected to a <tt>d2rq:Database</tt> and has
  a set of <tt>d2rq:PropertyBridges</tt> which attach properties to the instances.</p>

<h3>7.2.1 Resource Identity</h3>

<p>D2RQ provides four different mechanisms of assigning identifiers to the instances
  in the database:</p>

<dl>
<dt>URI patterns</dt>
<dd><p>A URI pattern is instantiated by inserting values of
  certain database columns into a pattern. Examples:</p>
  <pre>http://example.org/persons/@@<em>Persons.ID</em>@@
http://example.org/lineItems/item@@<em>Orders.orderID</em>@@-@@<em>LineItems.itemID</em>@@
urn:isbn:@@<em>Books.isbn</em>@@
mailto:@@<em>Persons.email</em>@@</pre>
  <p>The parts between <tt>@@</tt>'s mark database columns in
  <tt>Table.Column</tt> notation. URI patterns are used
  with the <tt>d2rq:uriPattern</tt> property.</p>
  <p>Certain characters, like spaces or the hash sign, are not allowed
    in URIs or have special meaning. Columns that contain such characters
    need to be encoded before their values can be inserted into a URI
    pattern:</p>
  <ul>
    <li>If a column is given as <tt>@@Table.Column|<strong>urlencode</strong>@@</tt>,
      then <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/net/URLEncoder.html">URL encoding</a>
      is applied before the string is inserted.</li>
    <li>If a column is given as <tt>@@Table.Column|<strong>urlify</strong>@@</tt>,
      then URL encoding is applied, with an additional rule that spaces are
      converted to underscores (<tt>_</tt>). Some people find that this
      produces friendlier URIs.</li>
  </ul>
</dd>

<dt>Relative URI patterns</dt>
<dd><p>A relative URI pattern is a URI pattern that generates
  <em>relative URIs</em>:</p>
  <pre>persons/@@<em>Persons.ID</em>@@</pre>
  <p>They will be combined with a <em>base URI</em> provided by
  the processing environment to form full URIs. Relative
  URI patterns allow the creation of portable mappings that
  can be used for multiple instances of the same database
  schema. Relative URI patterns are generated
  with the <tt>d2rq:uriPattern</tt> property.</p>
</dd>

<dt>URI columns</dt>
<dd><p>In some cases, the database may already contain URIs that
  can be used as resource identifiers, such as web page and
  document URLs. URI are generated from columns
  with the <tt>d2rq:uriColumns</tt> property.</p>
</dd>

<dt>Blank nodes</dt>
<dd><p>RDF also has the concept of blank nodes, existential qualifiers
  that denote some resource that exists and has certain properties,
  but is not named. In D2RQ, blank nodes can be generated from one or
  more columns. A distinct blank node will be generated for each distinct
  set of values of these columns. The columns are specified using the
  with the <tt>d2rq:bNodeIdColumns</tt> property.</p>
</dd>
</dl>

<dt>Singleton classmaps</dt>
<dd><p>A <tt>d2rq:ClassMap</tt> usually produces many resources. Sometimes
  it is desirable to have a class map that only produces a single resource
  with fixed, static identity. In that case, one can use the
  <tt>d2rq:constantValue</tt> property to name the single instance.</p></dd>

<h3>Properties of <tt>d2rq:ClassMap</tt></h3>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td valign="top"><strong>d2rq:dataStorage</strong></td>
    <td valign="top">Reference to a <tt>d2rq:Database</tt> where the instance data is stored.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:class</strong></td>
    <td valign="top">An RDF-S or OWL class. All resources generated by this
        ClassMap are instances of this class.</td>
  </tr>
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:uriPattern</strong></td>
    <td width="80%" valign="top">Specifies a URI pattern that will be used to
      identify instances of this class map.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:uriColumn</strong></td>
    <td valign="top">A database column containing URIrefs for identifying
      instances of this class map. The column name has to be in the form
      <tt>&quot;TableName.ColumnName&quot;</tt>.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:bNodeIdColumns</strong></td>
    <td valign="top">A comma-seperated list of column names in
      <tt>"TableName.ColumnName"</tt> notation. The instances of
      this class map will be blank nodes, one distinct blank node
      per distinct tuple of these columns.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:constantValue</strong></td>
    <td valign="top">This class map will only have a single instance, which is
      named by the value of this property. This can be a blank node or a URI.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:translateWith</strong></td>
    <td valign="top">Assigns a d2rq:TranslationTable to the class map. Values 
      from the d2rq:uriColumn or d2rq:uriPattern will be translated by the table 
      before a resource is generated. See <a href="#translationtable">below</a>
      for details.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:containsDuplicates</strong></td>
    <td valign="top"> Must be specified if a class map uses information from tables 
      that are not fully normalized. If the d2rq:containsDuplicates property value 
      is set to "true", then D2RQ adds a DISTINCT clause to all queries using 
      this classMap. &quot;False&quot; is the default value, which doesn't have 
      to be explicitly declared. Adding this property to class maps based on normalized 
      database tables degrades query performance, but doesn't affect query results.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:additionalProperty</strong></td>
    <td valign="top">Adds an <a href="#additionalproperty">AdditionalProperty</a>
      to all instances of this class. 
      This might be useful for adding rdfs:seeAlso properties or other fixed
      statements to all instances of the class. </td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:condition</strong></td>
    <td valign="top">Specifies an SQL WHERE condition. An instance of this class 
      will only be generated for database rows that satisfy the condition. Conditions 
      can be used to hide parts of the database from D2RQ, e.g. deny access to 
      data which is older or newer than a certain date. See section <a href="#conditional">Conditional 
      Mappings</a> for details.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:classDefinitionLabel</strong></td>
    <td valign="top">Specifies a label that will be served as <tt>rdfs:label</tt>
     for all associated class definitions. Multiple lables, e.g. in several languages, are supported.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:classDefinitionComment</strong></td>
    <td valign="top">Specifies a comment that will be served as <tt>rdfs:comment</tt>
     for all associated class definitions. Multiple comments are supported.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:additionalClassDefinitionProperty</strong></td>
    <td valign="top">Adds an <a href="#additionalproperty">AdditionalProperty</a>
      to all associated class definitions.</td>
  </tr>
</table>
<P><strong>ClassMap property:</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td valign="top"><strong>d2rq:classMap</strong></td>
    <td>Inverse of d2rq:class and unnecessary if d2rq:class is used. Specifies 
      that a d2rq:classMap is used to create instances of an OWL or RDF-S class.</td>
  </tr>
</table>
<P>&nbsp;</P>
<P><strong>Example: ClassMap where instances are identified using an URI pattern</strong></P>
  <pre>map:PaperClassMap a d2rq:ClassMap;
    d2rq:uriPattern &quot;http://www.conference.org/conf02004/paper#Paper@@Papers.PaperID@@&quot;;
    d2rq:class :Paper;
    d2rq:classDefinitionLabel "paper"@en;
    d2rq:classDefinitionComment "A conference paper."@en;
    d2rq:dataStorage map:Database1.</pre>
<P>The d2rq:class property is used to state that all resources generated by the 
  d2rq:ClassMap are instances of an RDFS or OWL class. D2RQ automatically creates 
  the necessary <tt>rdf:type</tt> triples.</P>
<P>&nbsp;</P>
<P><strong>Example: ClassMap where instances are identified using blank nodes</strong></P>
  <pre>map:Topic a d2rq:ClassMap ;
    d2rq:bNodeIdColumns &quot;Topics.TopicID&quot; ;
    d2rq:class :Topic ;
    d2rq:classDefinitionLabel "topic"@en;
    d2rq:classDefinitionComment "A topic."@en;
    d2rq:dataStorage map:Database1 .</pre>
  
<p>In order to recognize bNodes across several find() calls and to be able to 
  map bNodes to instance data in the database, D2RQ encodes the classMap name 
  together with the primary key values in the bNode label. The map above could 
  produce the bNode label &quot;http://www.example.org/dbserver01/db01#Topic@@6&quot;, 
  where the number &quot;6&quot; is a primary key value and &quot;http://www.example.org/dbserver01/db01#Topic&quot; 
  is the ClassMap name.</p>
<p>&nbsp;</p>
  <P><strong><a name="sameProperties"></a>Example: ClassMap for a group of classes 
  with the same properties</strong></P>
<P>If you want to use one ClassMap for a group of classes with the same properties 
  (like Person, Professor, Researcher, Student) that all come from the same table,
  you must create the <tt>rdf:type</tt> statements with an object property bridge instead of
  using d2rq:class.</P>
  <pre>map:PersonsClassMap a d2rq:ClassMap ;
       d2rq:uriColumn &quot;Persons.URI&quot; ;
       d2rq:dataStorage map:Database1 .

map:PersonsType a d2rq:PropertyBridge ;
      d2rq:property rdf:type ;
      d2rq:pattern &quot;http://annotation.semanticweb.org/iswc/iswc.daml#@@Persons.Type@@&quot; ; 
      d2rq:belongsToClassMap map:PersonsClassMap .</pre>
<P>Here, the class of each person is obtained by prefixing the values of the Persons.Type 
  column with an ontology namespace. If the class names within the ontology can't 
  be constructed directly from values of the Persons.Type column, then a <a href="#translationtable">TranslationTable</a> 
  could be used for aligning class names and database values.</P>
  
<h2><a name="propertybridge"></a>7.3 Property Bridges</h2>

<p>Property Bridges relate database table columns to RDF properties. They are 
  used to attach properties to the RDF resources created by a class map.
  The values of these properties are often literals, but can also be URIs
  or blank nodes that relate the resource to other resources, e.g. the value
  of a paper's <tt>:author</tt> property could be a URI representing a person.</p>

<p>If the one of the columns used in a property bridge is <tt>NULL</tt>
  for some database rows, then no property is created for the resources
  corresponding to these rows.</p>

<p><strong>Properties</strong></p>

<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr>
    <td valign="top"><strong>d2rq:belongsToClassMap</strong></td>
    <td valign="top">Specifies that the property bridge belongs to a d2rq:ClassMap. 
      Must be specified for every property bridge.</td>
  </tr>
  <tr>
    <td width="20%" valign="top"><strong>d2rq:property</strong></td>
    <td width="80%" valign="top">The RDF property that connects the ClassMap
      with the object or literal created by the bridge. Must be specified for
      every property bridge. If multiple <tt>d2rq:properties</tt> are
      specified, then one triple with each property is generated per resource.</td>
  </tr>
  <tr>
    <td width="20%" valign="top"><strong>d2rq:dynamicProperty</strong></td>
    <td width="80%" valign="top">A URI pattern that is used to generate the property URI at runtime. If multiple <tt>d2rq:dynamicProperty</tt> are specified, then one triple with each property is generated per resource.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:column</strong></td>
    <td valign="top">For properties with literal values.
      The database column that contains the literal values.
      Column names have to be given in the form <tt>&quot;TableName.ColumnName&quot;</tt>. 
    </td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:pattern</strong></td>
    <td valign="top">For properties with literal values.
      Can be used to extend and combine column values before
      they are used as a literal property value. If 
      a pattern contains more than one column, then a separating string, which 
      cannot occur in the column values, has to be used between the column names, 
      in order to allow D2RQ reversing given literals into column values.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:sqlExpression</strong></td>
    <td valign="top">For properties with literal values. Generates
      literal values by evaluating a SQL expression. Note that querying
      for such a computed value might put a heavy load on the database.
      See <a href="#ex-sqlexpression">example</a> below.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:datatype</strong></td>
    <td valign="top">For properties with literal values. Specifies the RDF datatype of the literals.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:lang</strong></td>
    <td valign="top">For properties with literal values. Specifies the language tag of the literals.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:uriColumn</strong></td>
    <td valign="top">For properties with URI values. Database column that contains URIs.
      Column names 
      have to be given in the form <tt>&quot;TableName.ColumnName&quot;.</tt></td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:uriPattern</strong></td>
    <td valign="top">For properties with URI values.
      Can be used to extend and combine column values before
      they are used as a URI property values. If 
      a pattern contains more than one column, then a separating string, which 
      cannot occur in the column values, has to be used between the column names, 
      in order to allow D2RQ reversing given literals into column values.
      See <a href="#exuripattern">example</a> below.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:uriSqlExpression</strong></td>
    <td valign="top">For properties with URI values and similar to <tt>d2rq:sqlExpression</tt>. Generates
      URIs by evaluating an SQL expression (the output must be a valid URI). Note that querying
      for such a computed value might put a heavy load on the database.
      See <a href="#ex-urisqlexpression">example</a> below.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:refersToClassMap</strong></td>
    <td valign="top">For properties that correspond to a foreign key.
      References another
      <tt>d2rq:ClassMap</tt> that creates the instances which are used
      as the values of this bridge. One or more <tt>d2rq:join</tt> properties
      must be specified to select the correct instances. See
      <a href="#exjoin2">example</a> below.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:constantValue</strong></td>
    <td valign="top">For properties that have the same constant value on all
      instances of the class map. The value can be a literal, blank node, or
      URI. See <a href="#exconstantvalue">example</a> below.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:join</strong></td>
    <td valign="top">If the columns used to create the literal value or object
      are not from the database table(s) that contains the ClassMap's columns,
      then the tables have to be joined together using one or more d2rq:join
      properties.
      See <a href="#exjoin">example</a> below.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:alias</strong></td>
    <td valign="top">Aliases take the form <tt>"Table AS Alias"</tt>
      and are used when a table needs to be joined to itself.
      The table can be referred to using the alias within the
      property bridge. See <a href="#exalias">example</a> below.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:condition</strong></td>
    <td valign="top">Specifies an SQL WHERE condition. The bridge will only generate 
      a statement if the condition holds. A common usage is to suppress triples 
      with empty literal values: <tt>d2rq:condition &quot;Table.Column <> ''&quot;</tt>. 
      See section <a href="#conditional">Conditional Mappings</a> for details. 
    </td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:translateWith</strong></td>
    <td valign="top">Assigns a d2rq:TranslationTable to the property bridge. Values 
      from the d2rq:column or d2rq:pattern will be translated by the table. See 
      section <a href="#translationtable">TranslationTables</a> for details.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:valueMaxLength</strong></td>
    <td valign="top">Asserts that all values of this bridge are not longer than 
      a number of characters. This allows D2RQ to speed up queries. See section 
      <a href="#hint">Performance Optimization</a> for details.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:valueContains</strong></td>
    <td valign="top">Asserts that all values of this bridge always contain a given 
      string. This allows D2RQ to speed up queries. Most useful in conjunction 
      with d2rq:column. See section <a href="#hint">Performance Optimization</a> 
      for details.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:valueRegex</strong></td>
    <td valign="top">Asserts that all values of this bridge match a given <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">regular 
      expression</a>. This allows D2RQ to speed up queries. Most useful in conjunction 
      with d2rq:column on columns whose values are very different from other columns 
      in the database. See section <a href="#hint">Performance Optimization</a> 
      for details.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:propertyDefinitionLabel</strong></td>
    <td valign="top">Specifies a label that will be served as <tt>rdfs:label</tt>
     for all associated property definitions. Multiple lables, e.g. in several languages, are supported.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:propertyDefinitionComment</strong></td>
    <td valign="top">Specifies a comment that will be served as <tt>rdfs:comment</tt>
     for all associated property definitions. Multiple comments are supported.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:additionalPropertyDefinitionProperty</strong></td>
    <td valign="top">Adds an <a href="#additionalproperty">AdditionalProperty</a>
      to all associated property definitions.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:limit</strong></td>
    <td valign="top">The maximum number of results to retrieve from the database for this PropertyBridge. Also see <a href="#database">d2rq:resultSizeLimit</a>.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:limitInverse</strong></td>
    <td valign="top">The maximum number of results to retrieve from the database for the inverse statements for this PropertyBridge.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:orderAsc</strong></td>
    <td valign="top">The column after which to sort results in ascending order for this PropertyBridge.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:orderDesc</strong></td>
    <td valign="top">The column after which to sort results in descending order for this PropertyBridge.</td>
  </tr>
</table>

<P><strong>PropertyBridge property:</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td valign="top"><strong>d2rq:propertyBridge</strong></td>
    <td> Inverse of d2rq:property and not needed if d2rq:property is used. The 
      d2rq:propertyBridge property specifies which property bridge is used for 
      an RDF property. If the same RDF property is used by several RDF classes, 
      then several property bridges are used to relate the RDF property to the 
      different class maps.</td>
  </tr>
</table>

<p><strong>Example: A simple property bridge</strong></p>
  <pre>map:PaperTitle a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:Paper;
    d2rq:property :title;
    d2rq:column &quot;Papers.Title&quot;;
    d2rq:lang "en";
    d2rq:propertyDefinitionLabel "title"@en;
    d2rq:propertyDefinitionComment "A paper's title."@en;
    .</pre>
<p>This attaches a <tt>:title</tt> property to all resources generated
  by the <tt>map:Paper</tt> class map. The property values are
  taken from the <tt>Papers.Title</tt> column. The generated literals
  will have a language tag of "en".</p>

<p><strong><a name="exjoin"></a>Example: Property bridge using information 
  from another database table</strong></p>
<pre>map:authorName a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:Papers;
    d2rq:property :authorName;
    d2rq:column &quot;Persons.Name&quot;;
    d2rq:join &quot;Papers.PaperID <= Rel_Person_Paper.PaperID&quot;;
    d2rq:join &quot;Rel_Person_Paper.PersonID => Persons.PerID&quot;;
    d2rq:datatype xsd:string;
    d2rq:propertyDefinitionLabel "name"@en;
    d2rq:propertyDefinitionComment "Name of an author."@en;
    .</pre>
<p>This property bridge adds the names of authors to papers. 
  If a paper has several authors, then several <tt>:authorName</tt>
  properties are added. The tables <tt>Papers</tt>
  and <tt>Persons</tt> are in an n:m relation. The <tt>d2rq:join</tt>
  is used to join the tables over the <tt>Rel_Person_Paper</tt>. The join condition contains
  directed arrows that indicate the foreign key relationship and are used as an optimization hint.
  In the example above, the arrow directions indicate that all possible values of <tt>Rel_Person_Paper.PaperID</tt> and
  <tt>Rel_Person_Paper.PersonID</tt> are present in <tt>Papers.PaperID</tt> and <tt>Persons.PerID</tt>, respectively.
  Where this is unclear, a simple equation sign (<tt>=</tt>) may be used.
  </p>

<p id="exuripattern"><strong>Example: A property bridge with <tt>mailto:</tt> URIs</strong></p>
<pre>map:PersonsClassEmail a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:PersonsClassMap;
    d2rq:property :email;
    d2rq:uriPattern &quot;mailto:@@Persons.Email@@&quot;;
    .</pre>
<p>The pattern <tt>mailto:@@Persons.Email@@</tt> is used to
  attach a <tt>mailto:</tt> prefix to the values of the
  &quot;Persons.Email&quot; column. The example uses
  <tt>d2rq:uriPattern</tt> instead of <tt>d2rq:pattern</tt>
  because the bridge should produce URIs, not literals.</p>

<p id="ex-sqlexpression"><strong>Example: A property bridge that computes mailbox hashes</strong></p>
<p>The popular <a href="http://xmlns.com/foaf/0.1/">FOAF vocabulary</a> has a
  property <tt>foaf:mbox_sha1sum</tt> for publishing email addresses in an
  encoded form. This prevents spammers from harvesting the address, while still
  letting us recognize if the same email address is used in two different
  places.</p>
<pre>map:UserEmailSHA1 a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:User;
    d2rq:property foaf:mbox_sha1sum;
    d2rq:sqlExpression "SHA1(CONCAT('mailto:', user.email))";
    .</pre>
<p>The values of the <tt>foaf:mbox_sha1sum</tt> are computed by evaluating
  the <tt>d2rq:sqlExpression</tt>. We first create a <tt>mailto:</tt> URI
  from the email address, as required by FOAF. Then we apply the SHA1
  hash function, again as required by FOAF. The result will be a literal value.</p>
<p>Note that querying for a specific <tt>foaf:mbox_sha1sum</tt> value will
  put a heavy load on the database because the hash has to be computed for every
  user in the database. For a large database, it would be better to store the
  encoded values in a column in the database.</p>

<p id="ex-urisqlexpression"><strong>Example: A property bridge with URIs generated by an SQL expression</strong></p>
<pre>map:HomepageURL a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:PersonsClassMap;
    d2rq:property foaf:homepage;
    d2rq:uriSqlExpression &quot;CONCAT('http://www.company.com/homepages/', user.username)&quot;;
    .</pre>
<p>The pattern <tt>mailto:@@Persons.Email@@</tt> is used to
  attach a <tt>mailto:</tt> prefix to the values of the
  &quot;Persons.Email&quot; column. The example uses
  <tt>d2rq:uriPattern</tt> instead of <tt>d2rq:pattern</tt>
  because the bridge should produce URIs, not literals.</p>

<p><strong><a name="exjoin2"></a>Example: Linking instances
  from two database tables</strong></p>
<pre>map:PaperConference a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:Paper;
    d2rq:property :conference;
    d2rq:refersToClassMap map:Conference;
    d2rq:join &quot;Papers.Conference => Conferences.ConfID&quot;;
    .</pre>
<p>The example attaches a <tt>:conference</tt> property to papers.
  The values of the property are generated by the <tt>map:Conference</tt>
  class map, not shown here. It may use a <tt>d2rq:uriPattern</tt>,
  <tt>d2rq:uriColumn</tt> or blank nodes to identify the conferences.
  The appropriate instance is found using the <tt>d2rq:join</tt>
  on the foreign key <tt>Papers.Conference</tt>.</p>

<p id="exalias"><strong>Example: Joining a table to itself using <tt>d2rq:alias</tt></strong></p>
<pre>map:ParentTopic a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:Topic;
    d2rq:property :parentTopic;
    d2rq:refersToClassMap map:Topic;
    d2rq:join "Topics.ParentID => ParentTopics.ID";
    d2rq:alias "Topics AS ParentTopics";
    .</pre>
<p>Here, a topic may have a parent topic whose ID is found in
  the <tt>Topics.ParentID</tt> column. This foreign key refers
  back to the <tt>Topics.ID</tt> column. The table has to be
  joined to itself. A <tt>d2rq:alias</tt> is declared, and
  the join is established between the original table and the
  aliased table. This pattern is typical for hierarchical
  or graph-style relationships.</p>

<p id="exconstantvalue"><strong>Example: Adding a constant property-value pair to each instance of a class map</strong></p>

<p>Sometimes it is desirable to add a property with a constant value
  to every resource that is created by a class map. To achieve this,
  use a <tt>d2rq:PropertyBridge</tt> that uses <tt>d2rq:constantValue</tt>:</p>
<pre>map:PersonsClassMap a d2rq:ClassMap;
    d2rq:class :Person;
    .
map:seeAlsoBridge a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:PersonsClassMap;
    d2rq:property rdfs:seeAlso;
    d2rq:constantValue &lt;http://annotation.semanticweb.org/iswc2003/>;
    .</pre>
<p>This adds an <tt>rdfs:seeAlso</tt> statement with a fixed URL object
  to every instance of the <tt>map:PersonsClassMap</tt> class map.</p>

<h2><a name="translationtable"></a>7.4 Translation Tables</h2>
<p>A <strong>d2rq:TranslationTable</strong> is an additional layer between the 
  database and the RDF world. It translates back and forth between values taken 
  from the database and RDF URIs or literals. A translation table can be attached 
  to a class map or a property bridge using the d2rq:translateWith property. TranslationTables 
  can be used only for mappings that are unique in both directions (1:1).</p>
<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:translation</strong></td>
    <td width="80%" valign="top">Adds a <a href="#translation">d2rq:Translation</a>
      to the table.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:href</strong></td>
    <td valign="top">Links to a CSV file containing translations. Each line of
      the file is a translation and contains two strings separated by a comma.
      The first one is the DB value, the second the RDF value.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:javaClass</strong></td>
    <td valign="top">The qualified name of a Java class that performs the mapping. 
      The class must implement the <a href="http://www4.wiwiss.fu-berlin.de/bizer/d2rq/javadoc/de/fuberlin/wiwiss/d2rq/Translator.html">Translator</a> 
      interface. Custom Translators might be useful for encoding and decoding 
      values, but are limited to 1:1 translations. Further datails can be found 
      in the D2RQ javadocs.</td>
  </tr>
</table>

<h3><a name="translation"></a>7.4.1 Translation</h3>
<p>A <strong>d2rq:Translation</strong> is a single entry in a
  d2rq:TranslationTable.
  
<p><strong>Properties</strong></p>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:databaseValue</strong></td>
    <td width="80%" valign="top">A value that might appear in a database column
      or might be generated by a d2rq:pattern.</td>
  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:rdfValue</strong></td>
    <td valign="top">A translation of that value to be used in RDF constructs.</td>
  </tr>
</table>
<br><p><strong>Example: Translating color codes</strong></p>
<p>A typical application are database columns containing type codes or similar 
  enumerated values. A translation table can be used to turn them into RDF resources. 
  In this example, the column ShinyObject.Color contains a color code: "R" for 
  red, "G" for green etc. These codes must be translated into RDF resources: :red, 
  :green etc.</p>
  <pre>:red a :Color;
:green a :Color;
# ... more colors omitted ...
:blue a :Color;

map:ColorBridge a d2rq:PropertyBridge;
        d2rq:belongsToClassMap map:ShinyObjectMap;
        d2rq:property :color;
        d2rq:uriColumn "ShinyObject.Color";
        d2rq:translateWith map:ColorTable.

map:ColorTable a d2rq:TranslationTable;
        d2rq:translation [ d2rq:databaseValue "R"; d2rq:rdfValue :red; ];
        d2rq:translation [ d2rq:databaseValue "G"; d2rq:rdfValue :green; ];
        # ... more translations omitted ...
        d2rq:translation [ d2rq:databaseValue "B"; d2rq:rdfValue :blue; ].</pre>
<p>The d2rq:translateWith statement tells D2RQ to look up database values in the 
  map:ColorTable. There, a translation must be given for each possible value. 
  If the database contains values which are not in the translation table, D2RQ 
  will not generate a :color statement for that :ShinyObject instance.</p>
<p>Note that the type of the resulting RDF node is determined by the bridge 
  and not by the node type of the rdfValues. map:ColorBridge uses d2rq:uriColumn.
  Thus, the translation will create URI nodes. If it used d2rq:column,
  then literals would be created.</p>

<h2><a name="configuration"></a>7.5 Configuration</h2>
<p>A <strong>d2rq:Configuration</strong> controls global behaviour of D2RQ. It is generally not required if the defaults are satisfactory.
<p><strong>Properties</strong>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr>
    <td width="20%" valign="top"><strong>d2rq:serveVocabulary</strong></td>
    <td width="80%" valign="top">Whether to serve inferred and user-supplied vocabulary data (boolean; <tt>true</tt> by default). This option is automatically set when using D2R Server's <tt>--fast</tt> command-line option.</td>
  </tr>
  <tr>
    <td valign="top"><strong>d2rq:useAllOptimizations</strong></td>
    <td valign="top">Whether to use bleeding edge optimizations (boolean; <tt>false</tt> by default).</td>
  </tr>
</table>
<P><strong>Example: Activating optimizations</strong></P>
<P>In order to activate bleeding edge optimizations, a <tt>d2rq:Configuration</tt> block with the property <tt>d2rq:useAllOptimizations</tt> set to <tt>true</tt> is created:</P>
<pre>map:Configuration a d2rq:Configuration;
	d2rq:useAllOptimizations true.</pre>

<h2><a name="conditional" id="conditional"></a>7.6 Conditional Mappings</h2>
<p>Sometimes only certain information from a database should be accessible, because 
  parts of the database might be confidential or outdated. Using <strong>d2rq:condition</strong> 
  you can specify conditions, which must be satisfied by all accessible data.</p>

<p> You can use d2rq:condition on class map and property bridge level. The d2rq:condition 
  value is added as an additional SQL WHERE clause to all queries generated using 
  the class map or property bridge. If the condition evaluates to FALSE for a 
  SQL result set row, then no triples will be generated from that row.</p>

<p><strong>Example: Using d2rq:condition on a d2rq:ClassMap</strong></p>
  <pre>map:Paper a d2rq:ClassMap;
            d2rq:class :Paper;
            d2rq:uriPattern "http://www.conference.org/conf02004/paper#Paper@@Papers.PaperID@@";
            d2rq:condition "Papers.Publish = 1";
            d2rq:dataStorage map:Database1.</pre>
<p>Only those papers with a value of 1 in the Papers.Publish column will be accessible. 
  All other papers are ignored.</p>
<p><strong>Example: Filtering zero-length strings</strong>
<p>Usually, the special value NULL is used in a database to indicate that some 
  field has no value, or that the value is unknown. Some databases, however, are 
  using a zero-length string ("") instead. D2RQ doesn't generate RDF statements 
  from NULL values, but it doesn't recognize zero-length strings and will generate 
  statements like <tt>:Person123 :firstName "".</tt> if the person's first name 
  is a zero-length string. In oder to suppress these statements, a d2rq:condition 
  can be added to the property bridge:</p>
  <pre>map:PersonsClassFirstName a d2rq:PropertyBridge;
            d2rq:property :firstName;
            d2rq:column "Persons.FirstName";
            d2rq:belongsToClassMap map:PersonsClassMap;
            d2rq:condition "Persons.FirstName &lt;&gt; ''".</pre>
<br>
<p><strong>Example: Relationship type codes</strong></p>
<p>Imagine a table Rel_Paper_Topic that associates rows from a Papers table
  with rows from a Topics table. The Rel_Paper_Topic table contains a
  PaperID column to reference the papers, a TopicID to reference the topics,
  and a RelationshipType column which contains 1 if the topic is a primary
  topic of the paper, and 2 if it is a secondary topic.</p>
<p>For primary topic relationships, the :primaryTopic property shall be used,
  and for others the :secondaryTopic property.</p>
<p>We can build a map for this scenario by creating two property bridges.
  One for :primaryTopic, one for :secondaryTopic. We add a d2rq:condition
  to both bridges to suppress those statements where the RelationshipType
  column doesn't have the correct value.</p>
  <pre>map:primaryTopic a d2rq:PropertyBridge;
            d2rq:belongsToClassMap map:Paper;
            d2rq:property :primaryTopic;
            d2rq:refersToClassMap map:Topic;
            d2rq:join "Papers.PaperID <= Rel_Paper_Topic.PaperID";
            d2rq:join "Rel_Paper_Topic.TopicID => Topics.TopicID";
            d2rq:condition "Rel_Paper_Topic.RelationType = 1".

map:secondaryTopic a d2rq:PropertyBridge;
            d2rq:belongsToClassMap map:Paper;
            d2rq:property :secondaryTopic;
            d2rq:refersToClassMap map:Topic;
            d2rq:join "Papers.PaperID <= Rel_Paper_Topic.PaperID";
            d2rq:join "Rel_Paper_Topic.TopicID => Topics.TopicID";
            d2rq:condition "Rel_Paper_Topic.RelationType = 2".</pre>


<h2><a name="servingvocabularies"></a>7.7 Serving Vocabulary Classes and Properties</h2>

<p>In the spirit of <a href="http://www.w3.org/DesignIssues/LinkedData.html">Linked Data</a>, the URIs of classes and properties should be dereferenceable.</p>

<p>In a mapping file auto-generated by the <a href="#generatemapping"><code>generate-mapping</code> utility</a>, the classes and properties have QNames such as <code>vocab:TableName</code> and <code>vocab:TableName_ColumnName</code>. The <code>vocab:</code> prefix expands to a URI relative to the base URI of the server, yielding URIs such as <code>http://<em>baseURI</em>/vocab/TableName</code>. These URIs can be dereferenced in D2R Server.</p>

<p>By default, the only statement about these URIs is an <code>rdf:type</code> statement that declares the URI as an <tt>rdfs:Class</tt> or <tt>rdf:Property</tt>. However, further statements can be added in the mapping file. This is done by adding additional properties, described in this section, to the class map or property map.</p>

<p>This feature only works for simple (URI, ANY, ANY) or (ANY, ANY, URI) find patterns that touch on vocabulary resources. In other words, it only works when dereferencing the class or property URI, or when describing the URI using a a SPARQL <code>DESCRIBE</code> query. It currently does <em>not</em> work within other SPARQL queries such as <code>SELECT</code> or <code>CONSTRUCT</code>.</p> 

<p>For further details, please refer to the <a href="http://www4.wiwiss.fu-berlin.de/bizer/d2r-server/#vocabulary">D2R documentation</a>.</p>
 

<h3><a name="vocab-label-comment"></a>7.7.1 Labels and Comments for Vocabulary Terms</h3>

<p>An <code>rdfs:label</code> can be added to a term URI by ading <code>d2rq:classDefinitionLabel</code> or <code>d2rq:propertyDefinitionLabel</code> to the class map or property map.</p>

<p>An <code>rdfs:comment</code> can be added by adding <code>d2rq:classDefinitionComment</code> and <code>d2rq:propertyDefinitionComment</code> to the class map or property map.</p>

<p>Other properties can be added by creating a <code>d2rq:AdditionalProperty</code> construct, described below, and by linking to it from the class map or property map using <code>d2rq:additionalClassDefinitionProperty</code> and <code>d2rq:additionalPropertyDefinitionProperty</code>.</p>


<h3><a name="additionalproperty"></a>7.7.2 AdditionalProperty</h3>

<p>A <strong>d2rq:AdditionalProperty</strong> construct can be used to add a fixed statement 
  to all class definitions of a class map, or to all property definitions of a property bridge.
  The statement is added to the result sets, if patterns like (ANY, ANY, ANY), (URI, ANY, ANY) or (URI, additionalPropertyName, 
  ANY) are used. 
  
  The usage of <tt>d2rq:AdditionalProperty</tt> to add instance data is now deprecated (<a href="#additionalproperty_deprecated">details</a>).
  
  The <tt>d2rq:additionalClassDefinitionProperty</tt> and <tt>d2rq:additionalPropertyDefinitionProperty</tt> properties are used to link from the class map
  or property bridge to the <tt>d2rq:AdditionalProperty</tt> definition.</p>
<P><strong>Properties</strong></P>
<table width="100%" border="1" cellpadding="5" cellspacing="0" bordercolor="#CCCCCC">
  <tr> 
    <td width="20%" valign="top"><strong>d2rq:propertyName </strong></td>
    <td width="80%" valign="top">The RDF property to be used as the predicate
      of all fixed statements.</td>

  </tr>
  <tr> 
    <td valign="top"><strong>d2rq:propertyValue</strong></td>
    <td valign="top">The value to be used as the object of all fixed statements.</td>
  </tr>
</table>
<P><strong>Example: Providing an additional property for a class definition</strong></P>
  <pre>map:PersonsClassMap a d2rq:ClassMap;
        d2rq:class :Person;
        d2rq:additionalClassDefinitionProperty map:PersonEquivalence.

map:PersonEquivalence a d2rq:AdditionalProperty;
        d2rq:propertyName owl:equivalentClass;
        d2rq:propertyValue foaf:Person.</pre>

<p>This adds an <tt>owl:equivalentClass</tt> statement with the fixed object <tt>foaf:Person</tt> to every related class definition.</p>

<P><strong>Example: Providing an additional property for a property definition</strong></P>
  <pre>map:PaperTitle a d2rq:PropertyBridge;
    	d2rq:belongsToClassMap map:Paper;
    	d2rq:property :title;
    	d2rq:column "Papers.Title";
    	d2rq:additionalPropertyDefinitionProperty map:PaperTitleEquivalence.

map:PaperTitleEquivalence a d2rq:AdditionalProperty;
        d2rq:propertyName owl:equivalentProperty;
        d2rq:propertyValue dc:title.</pre>

<p>This adds an <tt>owl:equivalentProperty</tt> statement with the fixed object <tt>dc:title</tt> to every related property definition.</p>


<h3><a name="vocabulary-serving"></a>7.7.3 Controlling vocabulary serving</h3>
<p>Vocabulary serving is enabled by default. In order to deactivate it, a <a href="#configuration"><tt>d2rq:Configuration</tt></a> block
with the property <tt>d2rq:serveVocabulary</tt> set to <tt>false</tt> must be created:

<P><strong>Example: Deactivating vocabulary serving</strong></P>
  <pre>map:Configuration a d2rq:Configuration;
	d2rq:serveVocabulary false.</pre>

<h2><a name="hint" id="hint"></a>7.8 Performance Optimization using Hint Properties</h2>
<p>This section covers hint properties that can be added to property bridges in 
  order to speed up queries: d2rq:valueMaxLength, d2rq:valueRegex and d2rq:valueContains.</p>

<p><strong>Example: Providing a maximum length</strong></p>
  <pre>map:PersonsClassFirstName a d2rq:PropertyBridge;
            d2rq:property :firstName;
            d2rq:column "Persons.FirstName";
            d2rq:belongsToClassMap map:PersonsClassMap;
            d2rq:valueMaxLength "15".</pre>
<p>The d2rq:valueMaxLength property can be used to tell D2RQ that the length of 
  Persons.FirstName values is limited to 15 characters. Using this information, 
  D2RQ doesn't have to look in the database anymore to figure out, that a given 
  FirstName which is longer than 15 characters isn't fitting. 
<p><strong>Example: Providing a regular expression</strong></p>
  <pre>map:PaperYear a d2rq:PropertyBridge;
            d2rq:property :year;
            d2rq:column "Papers.Year";
            d2rq:belongsToClassMap map:Paper;
            d2rq:datatype xsd:gYear;
            d2rq:valueRegex "^[0-9]{4}$".</pre>
<p>Here, the d2rq:valueRegex property is used to provide a <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">regular 
  expression</a> for the Papers.Year column. The statement asserts that all values 
  match the regular expression (or are NULL). The expression <tt>^[0-9]{4}$</tt> 
  matches every four-digit number. If you don't want to use the full regular expression 
  machinery, you can use d2rq:valueContains to assert that all values generated 
  by the property bridge contain a certain phrase.</p>

<p>You are geting the largest performance gain by providing hints for property 
  bridges which are using d2rq:column. You should define hints on columns of large 
  tables and on columns that are not indexed by the database. These are the cases 
  where a well-placed optimization hint can result in an order-of-magnitude improvement 
  for some queries. Don't bother to provide hints for property bridges based on 
  d2rq:pattern. These can be optimized very well without hints. In general,
  the biggest payoff is expected for hints on large tables. If you have a few
  very large tables with non-indexed columns in your database, that's where you
  should focus your efforts.</p>

<p>Please keep in mind that hint properties are not intended for filtering of 
  unwanted database values. They are only performance hints. Values that do not 
  fulfill the criteria will still appear in query results if find patterns like 
  (URI, ANY, ANY) are used. In oder to filter values, use <a href="#conditional">d2rq:condition</a> 
  or a <a href="#translationtable">translation table</a> with a custom Java class 
  that returns <tt>null</tt> for unwanted database values.</p>

<h2 id="deprecated">7.9 Deprecated Language Constructs</h2>

<p>This section lists several language constructs from older versions
of the D2RQ mapping language that have been replaced by better
alternatives and should no longer be used.</p>

<h3 id="datatype-object">7.9.1 <tt>d2rq:DatatypePropertyBridge</tt> and <tt>d2rq:ObjectPropertyBridge</tt></h3>

<p>Older versions of the language used two different classes to
distinguish between property bridges that produce literals, and
bridges that produce resources.</p>

<p>In the current version, both cases
are handled by the <tt>d2rq:PropertyBridge</tt> class. The distinction
is made by using an appropriate property on the bridge declaration:
<tt>d2rq:column</tt> and <tt>d2rq:pattern</tt> for literals,
<tt>d2rq:uriColumn</tt>, <tt>d2rq:uriPattern</tt> and
<tt>d2rq:bNodeIdColumns</tt> for resources.</dd></p>

<h3 id="additionalproperty_deprecated"><a name="additionalproperty_deprecated"></a>7.9.2 d2rq:additionalProperty</h3>
<p>Up until D2RQ 0.5.1, the <tt>d2rq:AdditionalProperty</tt> construct could be used
  to add a constant property-value pairs to all instances of a class map. An example
  is shown below:</p>
<pre>map:PersonsClassMap a d2rq:ClassMap;
    d2rq:class :Person;
    d2rq:additionalProperty map:SeeAlsoStatement.

map:SeeAlsoStatement a d2rq:AdditionalProperty;
    d2rq:propertyName rdfs:seeAlso;
    d2rq:propertyValue &lt;http://annotation.semanticweb.org/iswc2003/>.</pre>
<p>This adds an rdfs:seeAlso statement with a fixed URL object to every instance of
  the persons class map. In recent versions of the mapping language, the same is
  achieved by adding a property bridge to the class map, and giving it a
  <tt>d2rq:constantValue</tt> property with the fixed URL as the object, as
  shown in <a href="#exconstantvalue">this example</a>.
</p>
<p><tt>d2rq:AdditionalProperty</tt> constructs are still used with <tt>d2rq:additionalClassDefinitionProperty</tt>
and <tt>d2rq:additionalPropertyDefinitionProperty</tt> (<a href="#additionalproperty">see section 7.4.1</a>).

<hr />

<h1 id="change_log">8. Change Log</h1>
<ul>
  <li>2009-08-10: Updated for D2RQ v0.7 and D2R Server v0.7.</li>
  <li>2009-02-19: Updated for D2RQ v0.6 and D2R Server v0.6.</li>
  <li>2007-10-25: Updated for D2RQ v0.5.1 and D2R Server v0.4. </li>
  <li>2006-10-26: Updated for D2RQ v0.5.</li>
  <li>2005-10-21: Updated for D2RQ v0.4.</li>
  <li>2005-04-29: Updated for D2RQ v0.3.</li>
  <li>2004-08-03: Updated reflecting changes in D2RQ v0.2.</li>
  <li>2004-06-15: Initial version of this document.</li>
</ul>
<hr />
<p>$Id: index.htm,v 1.55 2009/10/02 10:51:58 fatorange Exp $</p>

</BODY>
</HTML>
