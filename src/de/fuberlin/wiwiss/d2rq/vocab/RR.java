/* CVS $Id: $ */
package de.fuberlin.wiwiss.d2rq.vocab; 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from file:doc/terms/r2rml.ttl 
 * @author Auto-generated by schemagen on 29 Mar 2012 10:34 
 */
public class RR {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.w3.org/ns/r2rml#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>Names a column in the child table of a join.</p> */
    public static final Property child = m_model.createProperty( "http://www.w3.org/ns/r2rml#child" );
    
    /** <p>The subject value generated for a logical table row will be asserted as an 
     *  instance of this RDFS class.</p>
     */
    public static final Property class_ = m_model.createProperty( "http://www.w3.org/ns/r2rml#class" );
    
    /** <p>Name of a column in the logical table. When generating RDF triples from a 
     *  logical table row, value from the specified column is used as the subject, 
     *  predicate, or object (based upon the specific domain).</p>
     */
    public static final Property column = m_model.createProperty( "http://www.w3.org/ns/r2rml#column" );
    
    public static final Property constant = m_model.createProperty( "http://www.w3.org/ns/r2rml#constant" );
    
    /** <p>Specifies the datatype of the object component for the generated triple from 
     *  a logical table row.</p>
     */
    public static final Property datatype = m_model.createProperty( "http://www.w3.org/ns/r2rml#datatype" );
    
    /** <p>An IRI reference for use as the graph name of all triples generated with the 
     *  GraphMap.</p>
     */
    public static final Property graph = m_model.createProperty( "http://www.w3.org/ns/r2rml#graph" );
    
    /** <p>Specifies a GraphMap. When used with a SubjectMap element, all the RDF triples 
     *  generated from a logical row will be stored in the specified named graph. 
     *  Otherwise, the RDF triple generated using the (predicate, object) pair will 
     *  be stored in the specified named graph.</p>
     */
    public static final Property graphMap = m_model.createProperty( "http://www.w3.org/ns/r2rml#graphMap" );
    
    /** <p>An expression that allows, at query processing time, use of index-based access 
     *  to the the (underlying) relational tables, instead of simply retrieving the 
     *  table rows first and then applying a filter. This property is useful for retrieval 
     *  based on conditions involving subject, predicate, or object generated from 
     *  logical table column(s) and involves some transformation.</p>
     */
    public static final Property inverseExpression = m_model.createProperty( "http://www.w3.org/ns/r2rml#inverseExpression" );
    
    /** <p>Specifies the join condition for joining the child logical table with the 
     *  parent logical table of the foreign key constraint.</p>
     */
    public static final Property joinCondition = m_model.createProperty( "http://www.w3.org/ns/r2rml#joinCondition" );
    
    /** <p>Specified the language for the object component for the generated triple from 
     *  a logical table row.</p>
     */
    public static final Property language = m_model.createProperty( "http://www.w3.org/ns/r2rml#language" );
    
    /** <p>Definition of logical table to be mapped.</p> */
    public static final Property logicalTable = m_model.createProperty( "http://www.w3.org/ns/r2rml#logicalTable" );
    
    /** <p>Specifies the object for the generated triple from the logical table row.</p> */
    public static final Property object = m_model.createProperty( "http://www.w3.org/ns/r2rml#object" );
    
    /** <p>An ObjectMap element to generate the object component of the (predicate, object) 
     *  pair from a logical table row.</p>
     */
    public static final Property objectMap = m_model.createProperty( "http://www.w3.org/ns/r2rml#objectMap" );
    
    /** <p>Names a column in the parent table of a join.</p> */
    public static final Property parent = m_model.createProperty( "http://www.w3.org/ns/r2rml#parent" );
    
    /** <p>Specifies the TriplesMap element corresponding to the parent logical table 
     *  of the foreign key constraint.</p>
     */
    public static final Property parentTriplesMap = m_model.createProperty( "http://www.w3.org/ns/r2rml#parentTriplesMap" );
    
    /** <p>Specifies the predicate for the generated triple from the logical table row.</p> */
    public static final Property predicate = m_model.createProperty( "http://www.w3.org/ns/r2rml#predicate" );
    
    /** <p>A PredicateMap element to generate the predicate component of the (predicate, 
     *  object) pair from a logical table row.</p>
     */
    public static final Property predicateMap = m_model.createProperty( "http://www.w3.org/ns/r2rml#predicateMap" );
    
    /** <p>A PredicateObjectMap element to generate (predicate, object) pair from a logical 
     *  table row.</p>
     */
    public static final Property predicateObjectMap = m_model.createProperty( "http://www.w3.org/ns/r2rml#predicateObjectMap" );
    
    /** <p>A RefObjectMap element to generate the object component of the (predicate, 
     *  object) pair from a logical table row using a foreign key constraint definition.</p>
     */
    public static final Property refObjectMap = m_model.createProperty( "http://www.w3.org/ns/r2rml#refObjectMap" );
    
    /** <p>A valid SQL query.</p> */
    public static final Property sqlQuery = m_model.createProperty( "http://www.w3.org/ns/r2rml#sqlQuery" );
    
    /** <p>An identifier for a SQL version.</p> */
    public static final Property sqlVersion = m_model.createProperty( "http://www.w3.org/ns/r2rml#sqlVersion" );
    
    /** <p>An IRI reference for use as subject for all the RDF triples generated from 
     *  a logical table row.</p>
     */
    public static final Property subject = m_model.createProperty( "http://www.w3.org/ns/r2rml#subject" );
    
    /** <p>A SubjectMap element to generate a subject from a logical table row.</p> */
    public static final Property subjectMap = m_model.createProperty( "http://www.w3.org/ns/r2rml#subjectMap" );
    
    /** <p>Schema-qualified name of a table or view.</p> */
    public static final Property tableName = m_model.createProperty( "http://www.w3.org/ns/r2rml#tableName" );
    
    /** <p>A template (format string) to specify how to generate a value for a subject, 
     *  predicate, or object, using one or more columns from a logical table row.</p>
     */
    public static final Property template = m_model.createProperty( "http://www.w3.org/ns/r2rml#template" );
    
    /** <p>A string indicating whether subject or object generated using the value from 
     *  column name specified for rr:column should be an IRI reference, blank node, 
     *  or a literal.</p>
     */
    public static final Property termType = m_model.createProperty( "http://www.w3.org/ns/r2rml#termType" );
    
    public static final Resource BaseTableOrView = m_model.createResource( "http://www.w3.org/ns/r2rml#BaseTableOrView" );
    
    /** <p>Denotes a blank node, used with termType</p> */
    public static final Resource BlankNode = m_model.createResource( "http://www.w3.org/ns/r2rml#BlankNode" );
    
    /** <p>Represents a graph map.</p> */
    public static final Resource GraphMap = m_model.createResource( "http://www.w3.org/ns/r2rml#GraphMap" );
    
    /** <p>Denotes an IRI, used with termpType.</p> */
    public static final Resource IRI = m_model.createResource( "http://www.w3.org/ns/r2rml#IRI" );
    
    /** <p>Represents a join condition.</p> */
    public static final Resource Join = m_model.createResource( "http://www.w3.org/ns/r2rml#Join" );
    
    /** <p>Denotes a Literal, used with termType.</p> */
    public static final Resource Literal = m_model.createResource( "http://www.w3.org/ns/r2rml#Literal" );
    
    /** <p>Represents a logical table.</p> */
    public static final Resource LogicalTable = m_model.createResource( "http://www.w3.org/ns/r2rml#LogicalTable" );
    
    /** <p>Represents an object map.</p> */
    public static final Resource ObjectMap = m_model.createResource( "http://www.w3.org/ns/r2rml#ObjectMap" );
    
    /** <p>Represents a predicate map.</p> */
    public static final Resource PredicateMap = m_model.createResource( "http://www.w3.org/ns/r2rml#PredicateMap" );
    
    /** <p>Represents a predicate-object map.</p> */
    public static final Resource PredicateObjectMap = m_model.createResource( "http://www.w3.org/ns/r2rml#PredicateObjectMap" );
    
    public static final Resource R2RMLView = m_model.createResource( "http://www.w3.org/ns/r2rml#R2RMLView" );
    
    /** <p>Denotes a reference to an object map.</p> */
    public static final Resource RefObjectMap = m_model.createResource( "http://www.w3.org/ns/r2rml#RefObjectMap" );
    
    /** <p>Represents a subject map.</p> */
    public static final Resource SubjectMap = m_model.createResource( "http://www.w3.org/ns/r2rml#SubjectMap" );
    
    /** <p>Represents a triples map.</p> */
    public static final Resource TriplesMap = m_model.createResource( "http://www.w3.org/ns/r2rml#TriplesMap" );
    
}
